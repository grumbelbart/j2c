package se.arnetheduck.j2c.transform;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Stack;

import org.eclipse.core.runtime.IPath;
import org.eclipse.jdt.core.dom.IPackageBinding;
import org.eclipse.jdt.core.dom.ITypeBinding;

public class ForwardWriter {
	private final IPath root;

	private Stack<String> cur = new Stack<String>();

	public ForwardWriter(IPath root) {
		this.root = root;
	}

	public void writeForward(Collection<IPackageBinding> packages,
			Iterable<ITypeBinding> types) throws IOException {
		List<IPackageBinding> p = new ArrayList<IPackageBinding>(packages);

		FileOutputStream fos = new FileOutputStream(root.append("forward.h")
				.toFile());
		PrintWriter pw = new PrintWriter(fos);

		pw.println("#pragma once");
		pw.println();

		pw.println("#include <stdint.h>");
		pw.println("#include <limits>");

		pw.println();
		pw.println("template<typename T> class Array;");
		pw.println("typedef Array<bool> boolArray;");
		pw.println("typedef Array<char16_t> char16_tArray;");
		pw.println("typedef Array<double> doubleArray;");
		pw.println("typedef Array<float> floatArray;");
		pw.println("typedef Array<int8_t> int8_tArray;");
		pw.println("typedef Array<int16_t> int16_tArray;");
		pw.println("typedef Array<int32_t> int32_tArray;");
		pw.println("typedef Array<int64_t> int64_tArray;");

		for (ITypeBinding t : types) {
			if (t.isArray() && t.getComponentType().isPrimitive()) {
				continue;
			}

			printType(pw, t);
			p.remove(t.getPackage());
		}

		// There might be some empty packages generated by imports
		for (IPackageBinding pb : p) {
			setNs(pw, Arrays.asList(pb.getNameComponents()));
		}

		setNs(pw, new ArrayList<String>());

		pw.close();

		fos = null;
		pw = null;
	}

	private void printType(PrintWriter pw, ITypeBinding tb) {
		List<String> pkg = Arrays.asList(TransformUtil.packageName(tb));
		String name = TransformUtil.name(tb);

		setNs(pw, pkg);

		printIndent(pw);
		pw.print(tb.isInterface() ? "struct " : "class ");
		pw.print(name);
		pw.println(";");
	}

	private void setNs(PrintWriter pw, List<String> pkg) {
		while (pkg.size() < cur.size()
				|| !cur.equals(pkg.subList(0, cur.size()))) {

			String ns = cur.pop();

			printIndent(pw);
			pw.print("} // ");
			pw.print(ns);
			pw.println();
		}

		if (!cur.equals(pkg)) {
			pw.println();

			while (!cur.equals(pkg)) {
				String ns = pkg.get(cur.size());

				printIndent(pw);
				pw.print("namespace ");
				pw.println(ns);
				printIndent(pw);
				pw.println("{");

				cur.push(ns);
			}
		}
	}

	private void printIndent(PrintWriter out) {
		for (int i = 0; i < cur.size(); i++)
			out.print("    ");
	}
}
